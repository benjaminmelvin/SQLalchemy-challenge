{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from matplotlib import style\n",
    "style.use('fivethirtyeight')\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reflect Tables into SQLAlchemy ORM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python SQL toolkit and Object Relational Mapper\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "engine = create_engine(\"sqlite:///Resources/hawaii.sqlite\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reflect an existing database into a new model\n",
    "Base = automap_base()\n",
    "# reflect the tables\n",
    "Base.prepare(engine, reflect=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['measurement', 'station']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can view all of the classes that automap found\n",
    "Base.classes.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save references to each table\n",
    "Measurement = Base.classes.measurement\n",
    "Station = Base.classes.station"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create our session (link) from Python to the DB\n",
    "session = Session(engine)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Climate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Earliest: 2010-01-01 , Latest: 2017-08-23\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Precipitation</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>0.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>0.15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Precipitation\n",
       "Date                     \n",
       "2016-08-23           0.00\n",
       "2016-08-23           0.02\n",
       "2016-08-23           0.05\n",
       "2016-08-23           0.70\n",
       "2016-08-23           0.15"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "earlieststr = session.query(Measurement.date).order_by(Measurement.date).first()\n",
    "lateststr = session.query(Measurement.date).order_by(Measurement.date.desc()).first()\n",
    "print(f\"Earliest: {earlieststr[0]} , Latest: {lateststr[0]}\")\n",
    "# Design a query to retrieve the last 12 months of precipitation data and plot the results\n",
    "latestdate = dt.datetime.strptime(lateststr[0], '%Y-%m-%d')\n",
    "querydate = dt.date(latestdate.year -1, latestdate.month, latestdate.day)\n",
    "querydate\n",
    "\n",
    "sel = [Measurement.date,Measurement.prcp]\n",
    "queryresult = session.query(*sel).filter(Measurement.date >= querydate).all()\n",
    "\n",
    "precipitation = pd.DataFrame(queryresult, columns=['Date','Precipitation'])\n",
    "precipitation = precipitation.dropna(how='any') # clean up non value entries\n",
    "precipitation = precipitation.sort_values([\"Date\"], ascending=True)\n",
    "precipitation = precipitation.set_index(\"Date\")\n",
    "precipitation.head()\n",
    "# Calculate the date 1 year ago from the last data point in the database\n",
    "\n",
    "# Perform a query to retrieve the data and precipitation scores\n",
    "\n",
    "# Save the query results as a Pandas DataFrame and set the index to the date column\n",
    "\n",
    "# Sort the dataframe by date\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAqMAAAHRCAYAAABenbA/AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nOzdd3gU5d7G8XtJSAIhEAIk9J6ICAQkUgMoXUJHRYqgNAVsKBqiIFIkUo5IUUBQlKJSJPTeQZpiwUMz9CpgQgiEBALJ+wfv7mHZlN20geT7uS4v2am/3ZnZ3PvMMzOmqKioRAEAAAAGyGV0AQAAAMi5CKMAAAAwDGEUAAAAhiGMAgAAwDCEUQAAABiGMAoAAADDEEbxSKpataqqVq2a7uWEhobK09NTO3bsyICq0i6j3k9G+/3339WhQwdVrFhRnp6eD2WNAIBHG2EUkiRPT0+r/7y8vFSmTBm1bNlSs2fP1t27d40uMcucPn1anp6eCgoKyrBlVq1aVZ6enhm2vKwQHR2tF154Qbt27VKrVq0UHBys/v37G11WuiQmJmrTpk0KDg5Ww4YNVa5cOXl7e6t69eoaNGiQTp06ley8sbGxCg0NVUBAgHx8fFSxYkW9/PLLOnr0aJLTb9myRR9++KHatm2rsmXLytPTU02bNrWrzm3btqlbt27y8/OTt7e3KlWqpI4dO2r9+vUOv+fz58/r9ddfV6VKleTt7a2qVatqyJAhioqKSnL6u3fvauHChXr22WdVqVIlFS1aVDVq1FCvXr20f/9+h9Z94cIFffXVV3rhhRfk7+8vHx8flSlTRq1atdL333+vxETb21yfPHlSgwYN0jPPPCNfX1/L+3/22Wc1f/58xcfH273++fPny9PTU6GhoQ7VnRZ79uzRxx9/rCZNmsjX11dFihRRlSpV1K9fP/3111/Jznf37l1NmzZN9erVU9GiRVW2bFk9//zz2rt3b5LT79+/XyNGjNBzzz0nPz8/eXp6ys/PL9nl79ixw+b7Pan/du3a5dD7dfR4kKTdu3erW7duln2hcuXKatu2rZYuXZrkvpCcmJgYLV68WP369VOtWrVUokQJFS9eXIGBgRo7dqxu3LhhM098fLyGDRumNm3aqHLlyipatKjKlSunBg0aaOzYsbp69apD7x8Zy8RN7yHJEpSCg4Ml3fuCPHnypFauXKlbt26pXbt2+u6774ws0crJkyclSeXKlUvXciIiIhQREaGSJUsqb968ku6FUX9/f9WvX1+rVq1Kd63SvTB69uzZZANARr2fjLR161a1b99er7zyiiZOnGh0ORkiLi5ORYsWVe7cuVWnTh1VqVJFuXLl0t69e/Xrr78qX758CgsL01NPPWU1361bt9S+fXvt3r1bNWrUUMOGDXX+/HktXbpULi4uWr58uQICAqzm6dq1q1avXi03NzeVL19ehw4dUkBAgDZu3JhijR999JEmT56sIkWKqHnz5ipatKj+/fdf/fnnn2rYsKFGjhxp9/s9deqUmjdvrsuXL6tVq1by8/PT/v37tWPHDvn6+mrdunXy8vKymueVV15RWFiYihUrppYtW6pAgQIKDw/XunXrdPfuXc2YMUMvvPCCXev/+OOP9fnnn6tkyZIKDAxU8eLFdfHiRa1cuVLXr19X+/btNXv2bJlMJss8a9eu1auvvqqAgACVKVNGnp6eioiI0MaNG3X+/HnVr19fy5Ytk7Ozc6rrnz9/vgYOHKjg4GCFhITY/bmlhZ+fn/79918FBASoevXqcnNz04EDB7R161Y5Ozvr22+/VevWra3mSUxM1CuvvKKlS5fK19dXLVu21NWrVxUWFqa4uDjNmTPH5kfxkCFDNH36dOXOnVt+fn46ePCgvL299ffffydZ1+nTp/X9998nO+7HH3+Ul5eXDh8+LFdXV7vea1qOh1mzZmnw4MHKmzevgoKCVLJkSV26dEkrV65UdHS0evbsqUmTJtm1/o0bN+q5555T/vz51aBBA1WsWFE3btzQxo0bdfr0afn5+Wnt2rVW+/aNGzdUvnx5Va9eXX5+fipSpIhu3Lihffv26c8//1SxYsW0bt06lS5d2q4akLEIo5D0vzD6YFg6ePCgmjZtqtjYWK1evVr16tUzorwsZUQYfRj98MMP6t+/f5b8Ic8q8fHx+vzzz9W7d2+bEDZu3DiNGTNGlStXtmkl+uyzzzRy5Ei1a9dOs2fPVq5c904qrVq1St26dVOlSpW0a9cuy3BJ2rdvnzw8POTn56dz587J398/1TD63Xff6a233lKzZs307bffyt3d3ab+3Llz2/1+O3bsqM2bN2vs2LF69dVXLcM/+OADffnllzY/NH777Tc1btxYfn5+2rJli9X6N23apE6d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b9bmzZt1/Pjx2ntefvll3XXXXZqamtK1116rO+64Q3/729/6+wMBICIEowAQk7vuukuS9Mwzz0iqZguZnZ3V/v379eCDD+prX/uann76ae3bt09LS0uSpNtuu03f/OY3JUk/+tGP9Nhjj+mxxx7TbbfdJkkqFAr63Oc+p/Pnz+vw4cP62c9+prGxMR04cEBPPfWUg18JAL1hzCgAdMmMGX366ac93fS2qakp7dixQ88995zeeecdvec97/G8/sILL+jzn/+8jh49qv3790sKHzO6vr6uj3/847r22mt18uRJZbPV9oRKpaLPfvazevPNN/Wvf/0rpl8LAPGgZRQAYnTllVdqcXFRkjyB6OLioubn5/XBD35QmzZtaiuIPHPmTK1l9dKlS7p48aIuXryoS5cu6TOf+Yz+97//qVgsxvZbACAOTGACgBgtLi7qve99ryRpYWFBDzzwgE6ePKlLly553lcqlVp+1n//+19J0v3336/7778/8D0XLlwgPR6AVCEYBYCYnDt3TpcvX9b73/9+SdK9996r559/Xt///vf1kY98RBs3blQmk9G9996rSqXS8vPMex544AFNT08HvucDH/hAdD8AAPqAYBQAYvKHP/xBknTHHXdoYWFBzzzzjGZmZjQzM1N7T7lc1sLCguf/ZTKZwM+7/vrrJVW7/j/1qU/FU2gA6DPGjAJADJ599lkdOXJE1113nfbv31+bbLS+7p0z+pvf/KahVdSMLfUHqdPT07rhhhv0q1/9KrBb/8KFC1H+BADoC1pGAaBHp06d0quvvqrV1VW9+eabeu6553T69Glt375dTzzxhDZs2KANGzZoz549evjhh7WysqLt27frhRde0PPPP6/JyUnP5330ox9VNpvVL3/5S5VKJU1MTGj37t3asWOHfv3rX+vLX/6ybrnlFt1zzz2amprSG2+8oX/+8586e/asXnzxRUdbAQC6QzAKAD36+c9/LkkaGxurrU2fz+cb1qY/duyYZmZm9Lvf/U6rq6u69dZb9dRTT+kLX/iC5/O2bt2qhx56SA899JB+8IMfaG1tTY888oh27NihT3ziEzp16pQefPBB/f73v9fly5e1ZcsW3XTTTfrJT37S198NAFEgzygAAACcYcwoAAAAnCEYBQAAgDMEowAAAHCGYBQAAADOEIwCAADAGYJRAAAAOEMwCgAAAGcIRgEAAOAMwSgAAACcIRgFAACAM/8PurPvwMeEvw8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use Pandas Plotting with Matplotlib to plot the data\n",
    "xx = precipitation.index.tolist()\n",
    "yy = precipitation['Precipitation'].tolist()\n",
    "\n",
    "plt.figure(figsize=(10,7))\n",
    "plt.bar(xx,yy,width = 5 ,color='b', alpha=0.5, align=\"center\",label='Precipitation')\n",
    "plt.tick_params(\n",
    "    axis='x',          # changes apply to the x-axis\n",
    "    which='both',      # both major and minor ticks are affected\n",
    "    bottom=False,      # ticks along the bottom edge are off\n",
    "    top=False,         # ticks along the top edge are off\n",
    "    labelbottom=False) # labels along the bottom edge are off\n",
    "major_ticks = np.arange(0,400,80)\n",
    "plt.xticks(major_ticks)\n",
    "\n",
    "plt.title(f\"Precipitation from {querydate} to {lateststr[0]}\")\n",
    "plt.xlabel(\"Date\")\n",
    "plt.ylabel(\"Precipitation\")\n",
    "plt.grid(which='major', axis='both', linestyle='-')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Precipitation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2021.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.177279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.461190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.020000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.130000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Precipitation\n",
       "count    2021.000000\n",
       "mean        0.177279\n",
       "std         0.461190\n",
       "min         0.000000\n",
       "25%         0.000000\n",
       "50%         0.020000\n",
       "75%         0.130000\n",
       "max         6.700000"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use Pandas to calcualte the summary statistics for the precipitation data\n",
    "precipitation.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Design a query to show how many stations are available in this dataset?\n",
    "session.query(Station.id).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('USC00519281', 2772),\n",
       " ('USC00519397', 2724),\n",
       " ('USC00513117', 2709),\n",
       " ('USC00519523', 2669),\n",
       " ('USC00516128', 2612),\n",
       " ('USC00514830', 2202),\n",
       " ('USC00511918', 1979),\n",
       " ('USC00517948', 1372),\n",
       " ('USC00518838', 511)]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What are the most active stations? (i.e. what stations have the most rows)?\n",
    "# List the stations and the counts in descending order.\n",
    "sel = [Measurement.station,func.count(Measurement.id)]\n",
    "activestations = session.query(*sel).\\\n",
    "    group_by(Measurement.station).\\\n",
    "    order_by(func.count(Measurement.id).desc()).all()\n",
    "activestations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(54.0, 85.0, 71.66378066378067)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using the station id from the previous query, calculate the lowest temperature recorded, \n",
    "# highest temperature recorded, and average temperature of the most active station?\n",
    "sel = [func.min(Measurement.tobs),func.max(Measurement.tobs),func.avg(Measurement.tobs)]\n",
    "mostactivestationdata = session.query(*sel).\\\n",
    "    group_by(Measurement.station).\\\n",
    "    order_by(func.count(Measurement.id).desc()).first()\n",
    "mostactivestationdata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f9eb939b690>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Choose the station with the highest number of temperature observations.\n",
    "# Query the last 12 months of temperature observation data for this station and plot the results as a histogram\n",
    "queryresult = session.query(Measurement.tobs).\\\n",
    "    filter(Measurement.station == activestations[0][0]).\\\n",
    "    filter(Measurement.date >= querydate).all()\n",
    "temperatures = list(np.ravel(queryresult))\n",
    "\n",
    "sel = [Station.station,Station.name,Station.latitude,Station.longitude,Station.elevation]\n",
    "queryresult = session.query(*sel).all()\n",
    "stations_desc = pd.DataFrame(queryresult, columns=['Station','Name','Latitude','Longitude','Elevation'])\n",
    "\n",
    "stationname = stations_desc.loc[stations_desc[\"Station\"] == activestations[0][0],\"Name\"].tolist()[0]\n",
    "\n",
    "# n, bins, patches = plt.hist(temperatures, bins=12,alpha=0.7, rwidth=1.0,label='tobs')\n",
    "plt.hist(temperatures, bins=12,rwidth=1.0,label='tobs')\n",
    "plt.grid(axis='both', alpha=0.75)\n",
    "plt.ylabel('Frequency')\n",
    "plt.title(f\"Temperature from {querydate} to {lateststr[0]} \\nmeasured at {stationname}\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bonus Challenge Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This function called `calc_temps` will accept start date and end date in the format '%Y-%m-%d' \n",
    "# and return the minimum, average, and maximum temperatures for that range of dates\n",
    "def calc_temps(start_date, end_date):\n",
    "    \"\"\"TMIN, TAVG, and TMAX for a list of dates.\n",
    "    \n",
    "    Args:\n",
    "        start_date (string): A date string in the format %Y-%m-%d\n",
    "        end_date (string): A date string in the format %Y-%m-%d\n",
    "        \n",
    "    Returns:\n",
    "        TMIN, TAVE, and TMAX\n",
    "    \"\"\"\n",
    "    \n",
    "    return session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).\\\n",
    "        filter(Measurement.date >= start_date).filter(Measurement.date <= end_date).all()\n",
    "\n",
    "# function usage example\n",
    "print(calc_temps('2012-02-28', '2012-03-05'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use your previous function `calc_temps` to calculate the tmin, tavg, and tmax \n",
    "# for your trip using the previous year's data for those same dates.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the results from your previous query as a bar chart. \n",
    "# Use \"Trip Avg Temp\" as your Title\n",
    "# Use the average temperature for the y value\n",
    "# Use the peak-to-peak (tmax-tmin) value as the y error bar (yerr)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the total amount of rainfall per weather station for your trip dates using the previous year's matching dates.\n",
    "# Sort this in descending order by precipitation amount and list the station, name, latitude, longitude, and elevation\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a query that will calculate the daily normals \n",
    "# (i.e. the averages for tmin, tmax, and tavg for all historic data matching a specific month and day)\n",
    "\n",
    "def daily_normals(date):\n",
    "    \"\"\"Daily Normals.\n",
    "    \n",
    "    Args:\n",
    "        date (str): A date string in the format '%m-%d'\n",
    "        \n",
    "    Returns:\n",
    "        A list of tuples containing the daily normals, tmin, tavg, and tmax\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    sel = [func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)]\n",
    "    return session.query(*sel).filter(func.strftime(\"%m-%d\", Measurement.date) == date).all()\n",
    "    \n",
    "daily_normals(\"01-01\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the daily normals for your trip\n",
    "# push each tuple of calculations into a list called `normals`\n",
    "\n",
    "# Set the start and end date of the trip\n",
    "\n",
    "# Use the start and end date to create a range of dates\n",
    "\n",
    "# Stip off the year and save a list of %m-%d strings\n",
    "\n",
    "# Loop through the list of %m-%d strings and calculate the normals for each date\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the previous query results into a Pandas DataFrame and add the `trip_dates` range as the `date` index\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the daily normals as an area plot with `stacked=False`\n"
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "nteract": {
   "version": "0.12.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
